<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Space with Square and Movable Car</title>
    <style>
        body { margin: 0; overflow: hidden; } /* 隐藏滚动条，确保全屏显示 */
        canvas { display: block; } /* 确保 canvas 元素正确显示 */
    </style>
</head>
<body>
    <!-- 引入 Three.js 库 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // 创建场景、相机和渲染器
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight); // 设置渲染器大小
        document.body.appendChild(renderer.domElement); // 将渲染器添加到页面中

        // 添加正方形（平面）
        const squareGeometry = new THREE.PlaneGeometry(10, 10); // 正方形平面，宽高为10
        const squareMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.DoubleSide });
        const square = new THREE.Mesh(squareGeometry, squareMaterial);
        square.position.set(0, -1, -10); // 将正方形放置在稍微低一点的位置
        scene.add(square);

        // 添加汽车模型（简化为长方体）
        const carGeometry = new THREE.BoxGeometry(2, 1, 4); // 长方体尺寸：宽2，高1，深4
        const carMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
        const car = new THREE.Mesh(carGeometry, carMaterial);
        car.position.set(0, 0, -5); // 汽车初始位置
        scene.add(car);

        // 设置相机位置
        camera.position.set(0, 2, 20); // 相机稍微提高位置，以便更好地观察场景

        // 添加环境光和方向光
        const ambientLight = new THREE.AmbientLight(0x404040); // 环境光
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8); // 方向光
        directionalLight.position.set(10, 10, 10); // 光源位置
        scene.add(directionalLight);

        // 初始化键盘控制
        const keys = {};
        window.addEventListener("keydown", (e) => {
            keys[e.code] = true; // 按下键时记录键码
        });
        window.addEventListener("keyup", (e) => {
            keys[e.code] = false; // 释放键时清除键码
        });

        // 动画循环
        function animate() {
            requestAnimationFrame(animate); // 循环调用自身，保持动画运行

            // 汽车移动逻辑
            const speed = 0.1; // 移动速度
            const rotationSpeed = 0.05; // 旋转速度

            if (keys["ArrowLeft"]) car.rotation.y += rotationSpeed; // 左键旋转
            if (keys["ArrowRight"]) car.rotation.y -= rotationSpeed; // 右键旋转
            if (keys["ArrowUp"]) { // 上键前进
                car.position.x -= Math.sin(car.rotation.y) * speed;
                car.position.z -= Math.cos(car.rotation.y) * speed;
            }
            if (keys["ArrowDown"]) { // 下键后退
                car.position.x += Math.sin(car.rotation.y) * speed;
                car.position.z += Math.cos(car.rotation.y) * speed;
            }

            // 限制汽车在正方形范围内
            car.position.x = Math.max(-5, Math.min(5, car.position.x)); // X轴限制
            car.position.z = Math.max(-5, Math.min(5, car.position.z)); // Z轴限制

            // 渲染场景
            renderer.render(scene, camera);
        }

        // 开始动画
        animate();

        // 窗口大小调整时更新渲染器和相机
        window.addEventListener("resize", () => {
            renderer.setSize(window.innerWidth, window.innerHeight); // 更新渲染器大小
            camera.aspect = window.innerWidth / window.innerHeight; // 更新相机宽高比
            camera.updateProjectionMatrix(); // 更新相机投影矩阵
        });
    </script>
</body>
</html>
